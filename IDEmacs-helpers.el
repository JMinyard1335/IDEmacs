;;; IDEmacs-helpers.el --- Helper functions for IDEmacs -*- lexical-binding: t -*-

;;; Commentary:

;; Helper functions for IDEmacs.

;;; Code:
(defconst idemacs/time_regex
  "\\([01][0-9]\\|2[0-3]\\):[0-5][0-9]\\(:[0-5][0-9]\\)?"
  "This is a regex string to allow HH:MM:SS time formats
It is in the 24hr time format and will accept the formats
HH:MM:SS or HH:MM")

(defun idemacs/helper-make-face (name &rest args)
  "Creates a face with the name `name' and the properties `args'."
  (list name `((t, args))))

(defun idemacs/helper-create-file (file template)
  "Creates a file with the name `file' and writes the string `template' to the file."
  (if (y-or-n-p (format "File %s does not exist. Would you like to create it?" file))
      (progn (find-file file)
	     (insert template)
	     (save-buffer)
	     (kill-buffer))
    (message "File %s not created" file)))

(defun idemacs/helper-create-classtime-string (time)
  "creates a string from the time format passed in"
  (format-time-string "<%Y-%m-%d %H:%M +1w>" time))

(defun idemacs/helper-replace-time-fields (string)
  "this function takes in a time string that that is in the format of <yyyy-mm-dd HH:MM +ni -ni>
If any of these fields are empty this function removes the spaces from the string ie: <yyyy-mm-dd     >
will become <yyyy-mm-dd>."
  (replace-regexp-in-string "[ \t>]*$" ">" string))

(defun idemacs/helper-validate-org-mode ()
  "Validates that the current buffer is in org-mode"
  (unless (eq major-mode 'org-mode)
    (error "This function can only be used in org-mode"))
  (message "The current buffer is in org-mode"))

(defun idemacs/helper-validate-time (string)
  "Validates the time string in the form of HH:MM:SS"
  (if (string-match-p idemacs/time_regex string)
      t
    nil))

(defun idemacs/helper-get-headers (&optional level)
  " This function returns a list of all the headers in the current buffer.
If `level' is provided, only headers of that level are returned."
  (let ((headings '()))
    (org-element-map (org-element-parse-buffer) 'headline
      (lambda (headline)
	(when (or (not level) (= (org-element-property :level headline) level))
	  (push (org-element-property :raw-value headline) headings))))
    headings))

(defun idemacs/helper-select-header (&optional level)
  "This function prompts the user to select a header a list of headings.
This list is generated by the function `idemacs/helper-get-headers'."
  (let ((choice ""))
    (if level
	(setq choice (completing-read "Select a header: " (idemacs/helper-get-headers level) nil t))
      (setq choice (completing-read "Select a header: " (idemacs/helper-get-headers) nil t)))))

(provide 'IDEmacs-helpers)
;;; IDEmacs-helpers.el ends here
